module.exports.config = {
	name: "pending",
	version: "1.0.5",
	credits: "uzairrajput",
	hasPermssion: 2,
	description: "Manage bot's waiting messages",
	commandCategory: "system",
	cooldowns: 5
};

module.exports.languages = {
    "vi": {
        "invaildNumber": "%1 kh√¥ng ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá",
        "cancelSuccess": "ƒê√£ t·ª´ ch·ªëi th√†nh c√¥ng %1 nh√≥m!",
        "notiBox": "Box c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin ph√™ duy·ªát ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng bot",
        "approveSuccess": "ƒê√£ ph√™ duy·ªát th√†nh c√¥ng %1 nh√≥m!",

        "cantGetPendingList": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch c√°c nh√≥m ƒëang ch·ªù!",
        "returnListPending": "„ÄåPENDING„Äç‚ùÆ T·ªïng s·ªë nh√≥m c·∫ßn duy·ªát: %1 nh√≥m ‚ùØ\n\n%2",
        "returnListClean": "„ÄåPENDING„ÄçHi·ªán t·∫°i kh√¥ng c√≥ nh√≥m n√†o trong h√†ng ch·ªù"
    },
    "en": {
        "invaildNumber": "%1 is not an invalid number",
        "cancelSuccess": "Refused %1 thread!",
        "notiBox": "üçíüå∏ ùôºùöõ. ùô∫ùöõùöíùöúùöëùöóùöä ùô±ùöäùöãùöû üíñüå∏ ùô±ùöòùöù ùô≤ùöòùöóùöóùöéùöåùöùùöéùöç ùöÇùöûùöåùöåùöéùöúùöúùöèùöûùöïùöïùö¢!\nùêîùêíùêÑ +ùêáùêÑùêãùêè ùêÖùêéùêë ùêåùêéùêëùêÑ ùêàùêçùêÖùêé :>",
        "approveSuccess": "‡§ï‡•É‡§∑‡•ç‡§£‡§æ ‡§¨‡§æ‡§¨‡•Å ‡§®‡•á ‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ‡§≤ ‡§¶‡•á ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Ç‡§™ ‡§ï‡•ã ‡§Ö‡§¨ ‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§ï‡§∞‡•ã %1 Thread!",

        "cantGetPendingList": "Can't get the pending list!",
        "returnListPending": "¬ª„ÄåPENDING„Äç¬´‚ùÆ The whole number of threads to approve is: %1 thread ‚ùØ\n\n%2",
        "returnListClean": "„ÄåPENDING„ÄçThere is no thread in the pending list"
    }
}

module.exports.handleReply = async function({ api, event, handleReply, getText }) {
    if (String(event.senderID) !== String(handleReply.author)) return;
    const { body, threadID, messageID } = event;
    var count = 0;

    if (isNaN(body) && body.indexOf("c") == 0 || body.indexOf("cancel") == 0) {
        const index = (body.slice(1, body.length)).split(/\s+/);
        for (const singleIndex of index) {
            console.log(singleIndex);
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(getText("invaildNumber", singleIndex), threadID, messageID);
            api.removeUserFromGroup(api.getCurrentUserID(), handleReply.pending[singleIndex - 1].threadID);
            count+=1;
        }
        return api.sendMessage(getText("cancelSuccess", count), threadID, messageID);
    }
    else {
        const index = body.split(/\s+/);
        for (const singleIndex of index) {
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(getText("invaildNumber", singleIndex), threadID, messageID);
            api.sendMessage(getText("notiBox"), handleReply.pending[singleIndex - 1].threadID);
            count+=1;
        }
        return api.sendMessage(getText("approveSuccess", count), threadID, messageID);
    }
}

module.exports.run = async function({ api, event, getText }) {
	const { threadID, messageID } = event;
    const commandName = this.config.name;
    var msg = "", index = 1;

    try {
		var spam = await api.getThreadList(100, null, ["OTHER"]) || [];
		var pending = await api.getThreadList(100, null, ["PENDING"]) || [];
	} catch (e) { return api.sendMessage(getText("cantGetPendingList"), threadID, messageID) }

	const list = [...spam, ...pending].filter(group => group.isSubscribed && group.isGroup);

    for (const single of list) msg += `${index++}/ ${single.name}(${single.threadID})\n`;

    if (list.length != 0) return api.sendMessage(getText("returnListPending", list.length, msg), threadID, (error, info) => {
		global.client.handleReply.push({
            name: commandName,
            messageID: info.messageID,
            author: event.senderID,
            pending: list
        })
	}, messageID);
    else return api.sendMessage(getText("returnListClean"), threadID, messageID);
}
